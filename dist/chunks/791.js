(self.webpackChunkinspection_scheduler=self.webpackChunkinspection_scheduler||[]).push([[791],{20791:(e,t,a)=>{"use strict";a.r(t),a.d(t,{applyEdits:()=>h,isEditableLayer:()=>p});var s=a(82550),r=a(59472),d=a(32656),i=a(10923),l=a(39105),n=a(83477),u=a(15988),o=a(91535);function p(e){var t,a;return!0===(null==e||null==(t=e.capabilities)||null==(a=t.operations)?void 0:a.supportsEditing)&&e&&(!("editingEnabled"in e)||e.editingEnabled)}async function h(e,t,a,r){let i,u;const p={edits:a,result:(0,l.create)(((e,t)=>{i=e,u=t}))};e.emit("apply-edits",p);try{const{results:u,edits:p}=await async function(e,t,a,s){if(await e.load(),!function(e){return e&&null!=e.applyEdits}(t))return(0,l.reject)(new d.Z(`${e.type}-layer:no-editing-support`,"Layer source does not support applyEdits capability",{layer:e}));if(!e.editingEnabled)throw new d.Z(`${e.type}-layer:editing-disabled`,"Editing is disabled for layer",{layer:e});const r=await function(e,t,a){const s=t&&(t.addFeatures||t.updateFeatures||t.deleteFeatures),r=t&&(t.addAttachments||t.updateAttachments||t.deleteAttachments);if(!t||!s&&!r)throw new d.Z(`${e.type}-layer:missing-parameters`,"'addFeatures', 'updateFeatures', 'deleteFeatures', 'addAttachments', 'updateAttachments' or 'deleteAttachments' parameter is required");if(!e.capabilities.data.isVersioned&&a&&a.gdbVersion)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'gdbVersion' is applicable only if the layer supports versioned data. See: 'capabilities.data.isVersioned'");if(!e.capabilities.editing.supportsRollbackOnFailure&&a&&a.rollbackOnFailureEnabled)throw new d.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'rollbackOnFailureEnabled' parameter. See: 'capabilities.editing.supportsRollbackOnFailure'");if(!e.capabilities.editing.supportsGlobalId&&a&&a.globalIdUsed)throw new d.Z(`${e.type}-layer:invalid-parameter`,"This layer does not support 'globalIdUsed' parameter. See: 'capabilities.editing.supportsGlobalId'");if(!e.capabilities.editing.supportsGlobalId&&r)throw new d.Z(`${e.type}-layer:invalid-parameter`,"'addAttachments', 'updateAttachments' and 'deleteAttachments' are applicable only if the layer supports global ids. See: 'capabilities.editing.supportsGlobalId'");if((!a||!a.globalIdUsed)&&r)throw new d.Z(`${e.type}-layer:invalid-parameter`,"When 'addAttachments', 'updateAttachments' or 'deleteAttachments' is specified, globalIdUsed should be set to true");const i={...t};if(i.addFeatures=t&&n.Z.isCollection(t.addFeatures)?t.addFeatures.toArray():i.addFeatures||[],i.updateFeatures=t&&n.Z.isCollection(t.updateFeatures)?t.updateFeatures.toArray():i.updateFeatures||[],i.deleteFeatures=t&&n.Z.isCollection(t.deleteFeatures)?t.deleteFeatures.toArray():i.deleteFeatures||[],i.addFeatures.length&&!e.capabilities.operations.supportsAdd)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support adding features.");if(i.updateFeatures.length&&!e.capabilities.operations.supportsUpdate)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support updating features.");if(i.deleteFeatures.length&&!e.capabilities.operations.supportsDelete)throw new d.Z(`${e.type}-layer:unsupported-operation`,"Layer does not support deleting features.");i.addAttachments=i.addAttachments||[],i.updateAttachments=i.updateAttachments||[],i.deleteAttachments=i.deleteAttachments||[],i.addFeatures=i.addFeatures.map(y),i.updateFeatures=i.updateFeatures.map(y);const l=a&&a.globalIdUsed;return i.addFeatures.forEach((t=>c(t,e,l))),i.updateFeatures.forEach((t=>c(t,e,l))),i.deleteFeatures.forEach((t=>c(t,e,l))),i.addAttachments.forEach((t=>m(t,e))),i.updateAttachments.forEach((t=>m(t,e))),async function(e){const t=e.addFeatures,a=e.updateFeatures,s=t.concat(a).map((e=>e.geometry)),r=await(0,o.aX)(s),d=t.length,i=a.length;return r.slice(0,d).forEach(((t,a)=>{e.addFeatures[a].geometry=t})),r.slice(d,d+i).forEach(((t,a)=>{e.updateFeatures[a].geometry=t})),e}(i)}(e,a,s);return r.addFeatures.length||r.updateFeatures.length||r.deleteFeatures.length||r.addAttachments.length||r.updateAttachments.length||r.deleteAttachments.length?{edits:r,results:await t.applyEdits(r,s)}:{edits:r,results:{addFeatureResults:[],updateFeatureResults:[],deleteFeatureResults:[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}}(e,t,a,r),h=e=>e.filter((e=>!e.error)).map(s.d9),b={edits:p,addedFeatures:h(u.addFeatureResults),updatedFeatures:h(u.updateFeatureResults),deletedFeatures:h(u.deleteFeatureResults),addedAttachments:h(u.addAttachmentResults),updatedAttachments:h(u.updateAttachmentResults),deletedAttachments:h(u.deleteAttachmentResults)};return(b.addedFeatures.length||b.updatedFeatures.length||b.deletedFeatures.length||b.addedAttachments.length||b.updatedAttachments.length||b.deletedAttachments.length)&&e.emit("edits",b),i(b),u}catch(e){throw u(e),e}}function c(e,t,a){if(a){if("attributes"in e&&!e.attributes[t.globalIdField])throw new d.Z(`${t.type}-layer:invalid-parameter`,"Feature should have 'globalId' when 'globalIdUsed' is true");if(!("attributes"in e)&&!e.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"'globalId' of the feature should be passed when 'globalIdUsed' is true")}if("geometry"in e&&(0,r.pC)(e.geometry)){if(e.geometry.hasZ&&!1===t.capabilities.data.supportsZ)throw new d.Z(`${t.type}-layer:z-unsupported`,"Layer does not support z values while feature has z values.");if(e.geometry.hasM&&!1===t.capabilities.data.supportsM)throw new d.Z(`${t.type}-layer:m-unsupported`,"Layer does not support m values while feature has m values.")}}function m(e,t){const{feature:a,attachment:s}=e;if(!a||"attributes"in a&&!a.attributes[t.globalIdField])throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to a feature with 'globalId'");if(!("attributes"in a)&&!a.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to 'globalId' of the parent feature");if(!s.globalId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'globalId'");if(!s.data&&!s.uploadId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment should have 'data' or 'uploadId'");if(!(s.data instanceof File&&s.data.name||s.name))throw new d.Z(`${t.type}-layer:invalid-parameter`,"'name' is required when attachment is specified as Base64 encoded string using 'data'");if(!t.capabilities.editing.supportsUploadWithItemId&&s.uploadId)throw new d.Z(`${t.type}-layer:invalid-parameter`,"This layer does not support 'uploadId' parameter. See: 'capabilities.editing.supportsUploadWithItemId'");if("string"==typeof s.data){const e=(0,i.sJ)(s.data);if(e&&!e.isBase64)throw new d.Z(`${t.type}-layer:invalid-parameter`,"Attachment 'data' should be a Blob, File or Base64 encoded string")}}function y(e){const t=new u.default;return e.attributes||(e.attributes={}),t.geometry=e.geometry,t.attributes=e.attributes,t}}}]);
//# sourceMappingURL=791.js.map